@using DSitemapTester.BLL.Dtos;

@model PresentationWebResourceDto

@{
    ViewBag.Title = "Test";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-6">
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Total tests</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-plus"></i></button>
                </div>
            </div>
            <div class="box-body">
                <div id="total-chart"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Url Tests</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-plus"></i></button>
                </div>
            </div>
            <div class="box-body">
                <div id="url-chart"></div>
            </div>
        </div>
    </div>
</div>

<div class="box">
    <div class="box-header with-border">
        <h3 class="box-title">Url Tests</h3>
        <div class="box-tools pull-right">
            <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-plus"></i></button>
        </div>
    </div>
    <div class="box-body">
        <div id="url-line-chart"></div>
    </div>
</div>

<div class="box">
    <div class="box-header with-border">
        <h2 style="text-align:center">WebResource : @Model.Url</h2>

        <h4 style="text-align:center">Date: @Model.Tests.First().Date</h4>
        <h4 style="text-align:center">Test is completed in @Model.Tests.First().Duration.ToString("0.00") seconds</h4>
    </div>
    <div class="box-body">
        <table id="testResults" class="table table-hover table-bordered table-striped table-condensed"
               cellspacing="1">
            <thead>
                <tr>
                    <th scope="col">Url</th>
                    <th scope="col">Minimal Response Time</th>
                    <th scope="col">Average Response Time</th>
                    <th scope="col">Maximal Response Time</th>
                    <th scope="col">Tests Count</th>
                </tr>
            </thead>
            <tbody>
                @foreach (PresentationWebResourceTestDto webResourceTest in Model.Tests)
            {
                foreach (PresentationTestDto test in webResourceTest.Tests)
                {
                        <tr class="cursor-pointer">
                            <td>
                                @if (test.WrongTestsCount == 0)
                                {
                                    <img src="~/Content/icons/icon_success.png" />
                                    <a href='@Html.DisplayFor(res => test.Url)'>@Html.DisplayFor(res => test.Url)</a>
                                }
                                else
                                {
                                    if (test.WrongTestsCount == test.TestsCount)
                                    {
                                        <img src="~/Content/icons/icon_wrong.png" />
                                        <a href='@Html.DisplayFor(res => test.Url)'>@Html.DisplayFor(res => test.Url)</a>
                                    }
                                    else
                                    {
                                        <img src="~/Content/icons/icon_warning.png" />
                                        <a href = '@Html.DisplayFor(res => test.Url)'>@Html.DisplayFor(res => test.Url)</a>
                                    }
                                }
                            </td>
                            <td> @Html.DisplayFor(res => test.MinimalResponseTime.ResponseTime) </td>
                            <td> @Html.DisplayFor(res => test.AverageResponseTime.ResponseTime) </td>
                            <td> @Html.DisplayFor(res => test.MaximalResponseTime.ResponseTime) </td>
                            <td> @Html.DisplayFor(res => test.TestsCount) </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/Scripts/GoogleCharts")

    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawTotalChart);
        google.charts.setOnLoadCallback(drawUrlChart);

        function drawTotalChart() {

            var data = google.visualization.arrayToDataTable([
              ['Task', 'Tests'],
              ['Successful', @Model.Tests.First().TotalTestsCount - @Model.Tests.First().TotalWrongTestsCount],
              ['Wrong',  @Model.Tests.First().TotalWrongTestsCount],
            ]);

            var options = {
                title: 'Total Tests : ' + @Model.Tests.First().TotalTestsCount,
                is3D: true,
                colors: ['green', 'orange']
            }

            var chart = new google.visualization.PieChart(document.getElementById('total-chart'));

            chart.draw(data, options);
        }
        function drawUrlChart() {

            var data = google.visualization.arrayToDataTable([
              ['Task', 'Url'],
              ['Successful', @Model.Tests.First().SuccessfulUrls],
              ['Wrong', @Model.Tests.First().WrongUrls],
              ['Warning',  @Model.Tests.First().Tests.Count - (@Model.Tests.First().SuccessfulUrls + @Model.Tests.First().WrongUrls)],
            ]);

            var options = {
                title: 'Total Urls : ' + @Model.Tests.First().Tests.Count,
                vAxis: {minValue: 0,
                    maxValue: 100,
                    format: "percent"
                },
                sliceVisibilityThreshold:0,
                is3D: true,
                colors: ['red', 'blue', 'orange']
            };


            var chart = new google.visualization.PieChart(document.getElementById('url-chart'));

            chart.draw(data, options);
        }
    </script>

    <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawUrlLineChart);

        function drawUrlLineChart() {
            var data = new google.visualization.DataTable();

            var data=[];
            var Header= ['Url', 'Maximal', 'Average', 'Minimum'];

            data.push(Header);


            @foreach (PresentationTestDto test in Model.Tests.First().Tests)
          {
          <text>
            var temp=[];
            temp.push('@test.Url.Split(new string[] { "://" }, StringSplitOptions.None)[1]');
            temp.push(@test.MaximalResponseTime.ResponseTime.ToString("0.00").Replace(',', '.'));
            temp.push(@test.AverageResponseTime.ResponseTime.ToString("0.00").Replace(',', '.'));
            temp.push(@test.MinimalResponseTime.ResponseTime.ToString("0.00").Replace(',', '.'));

            data.push(temp);
            </text>
          };

            var options = {
                title: 'Url Performance',
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            console.log(data);
            var chartdata = new google.visualization.arrayToDataTable(data);

            var chart = new google.visualization.LineChart(document.getElementById('url-line-chart'));

            chart.draw(chartdata, options);
        }
    </script>

}







